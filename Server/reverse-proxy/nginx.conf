# Configuration for a reverse-proxy server with apache in the backend
# (apache SSL listening on port 8083)

#   * Official English Documentation: http://nginx.org/en/docs/

user  nginx;
worker_processes  2;

error_log  /var/log/nginx/error.log;
#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    use epoll;
}

http {
    charset utf-8;

    # Enumerate all the Tornado servers here
    # this configuration was used in the controlkubi.com server
    # where a tornado server was running
    upstream frontends {
        server 127.0.0.1:8082;
    }

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    keepalive_timeout  15;
    proxy_read_timeout 200;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml
        application/x-javascript application/xml
        application/atom+xml text/javascript
		application/javascript

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    ssl_session_cache	shared:SSL:10m;
    ssl_session_timeout	10m;


    server {

        listen 443 ssl;

        server_name  mysite.com www.mysite.com;

        ssl_certificate         /var/www/ssl/mysite_bundle.crt;
        ssl_certificate_key     /var/www/ssl/mysite.key;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off; # Requires nginx >= 1.5.9
        ssl_stapling on; # Requires nginx >= 1.3.7
        ssl_stapling_verify on; # Requires nginx => 1.3.7
        resolver $DNS-IP-1 $DNS-IP-2 valid=300s;
        resolver_timeout 5s;
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

        #ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:RC4-SHA;

        location / {
            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_pass http://frontends;
        }
    }


    server {

        listen 80;

        root /var/www/revolve/public;

        index index.php index.html index.htm;

        server_name www.mysite.com;

        location / {
            try_files $uri $uri/ /index.php;
        }

        location /phpmyadmin/ {
            try_files $uri $uri/ /index.php;
        }

        location ~ \.php$ {
            #proxy_set_header X-Real-IP  $remote_addr;
            #proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_pass http://127.0.0.1:8083$request_uri;
            proxy_redirect off;
        }

        location ~ /\.ht {
            deny all;
        }
    }

    # SSL apex (naked) domain redirect:
    server {
        listen 443 ssl;
        server_name mysite.com;
        ssl_certificate /var/www/ssl/mysite_bundle.crt;
        ssl_certificate_key /var/www/ssl/mysite.key;
        add_header nginx_redirect apex_domain_ssl;
        return 301 https://www.mysite.com$request_uri;
     }

     # It's also possible to point to this server with the apex domain
     # and this can redirect, for other domains:
     #server {
         #listen 443 ssl;
         #server_name other-site.com;
         #ssl_certificate /var/www/ssl/other-site.bundle.crt;
         #ssl_certificate_key /var/www/ssl/other-site.key;
         #add_header nginx_redirect apex_domain_ssl;
         #return 301 https://www.other-site.com$request_uri;
     #}
}
