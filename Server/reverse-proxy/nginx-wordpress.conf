# Configuration for a reverse-proxy server with apache in the backend
# (apache SSL listening on port 8083)

#   * Official English Documentation: http://nginx.org/en/docs/

user nginx;
worker_processes auto;

error_log  /var/log/nginx/error.log;
#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

pid        /var/run/nginx.pid;

events {
    worker_connections  512;
    use epoll;
}

http {
    charset utf-8;

    # Enumerate all the Tornado servers here
    # this configuration was used in the controlkubi.com server
    # where a tornado server was running
    #upstream frontends {
    #    server 127.0.0.1:8082;
    #}

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    keepalive_timeout  15;
    proxy_read_timeout 200;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_disable msie6;
    gzip_static on;
    gzip_comp_level 4;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml
        application/x-javascript application/xml
        application/atom+xml text/javascript
        application/javascript

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    #proxy_next_upstream error;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    ssl_session_cache	shared:SSL:10m;
    ssl_session_timeout	10m;

    # Caching
    proxy_cache_path /var/www/cache levels=1:2 keys_zone=revolve:100m max_size=1g inactive=60m;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    server {

        listen 443 ssl;

        server_name  www.revolverobotics.com;

        ssl_certificate         /var/www/ssl/controlkubi_bundle.crt;
        ssl_certificate_key     /var/www/ssl/controlkubi.key;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
        ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off; # Requires nginx >= 1.5.9
        ssl_stapling on; # Requires nginx >= 1.3.7
        ssl_stapling_verify on; # Requires nginx => 1.3.7

        ssl_dhparam /var/www/ssl/dhparams.pem;

        resolver ns-880.awsdns-46.net ns-1157.awsdns-16.org valid=300s;
        resolver_timeout 5s;
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff; 

        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass_header Set-Cookie;

        set $wordpress_auth "";
        if ($http_cookie ~* "wordpress_logged_in_[^=]*=([^%]+)%7C") {
            set $wordpress_auth wordpress_logged_in_$1;
        }

        location / {
            proxy_cache revolve;
            proxy_cache_bypass $http_cache_control;
            proxy_cache_valid 30m;
            proxy_cache_use_stale error
                                  timeout
                                  invalid_header
                                  http_500
                                  http_502
                                  http_504
                                  http_404;
            proxy_cache_bypass $wordpress_auth;
            proxy_no_cache $wordpress_auth;


            add_header X-Proxy-Cache $upstream_cache_status;

            proxy_pass https://127.0.0.1:8083$request_uri;
            proxy_redirect off;
        }


        location ~* ^/(wp-content|wp-includes)/(.*)\.(gif|jpg|jpeg|png|ico|bmp|js|css|pdf|doc)$ {
            root /var/www/revolve-robotics;
        }


        location ~* ^/(wp-admin|wp-login.php)
        {
            proxy_pass https://127.0.0.1:8083$request_uri;
        }

        #location ~ /purge(/.*) {
        #    proxy_cache_purge main "$scheme://$host$1";
        #}
    }


    server {

        listen 80;

        root /var/www/revolve-robotics;

        index index.php index.html index.htm;

        server_name revolverobotics.com www.revolverobotics.com;

        location / {
            try_files $uri $uri/ /index.php;
        }

        location /phpmyadmin/ {
            try_files $uri $uri/ /index.php;
        }

        location ~ \.php$ {
            #proxy_set_header X-Real-IP  $remote_addr;
            #proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_pass https://127.0.0.1:8083$request_uri;
            proxy_redirect off;
        }

        location ~ /\.ht {
            deny all;
        }
    }

    # SSL apex (naked) domain redirect:
	# RE-ENABLE WHEN REPOINTING DNS TO revolverobotics.com
    server {
        listen 443 ssl;
        server_name revolverobotics.com;
        ssl_certificate /var/www/ssl/controlkubi_bundle.crt;
        ssl_certificate_key /var/www/ssl/controlkubi.key;
        add_header nginx_redirect apex_domain_ssl;
        return 301 https://www.revolverobotics.com$request_uri;
    }

    # It's also possible to point to this server with the apex domain
    # and this can redirect, for other domains:
    #server {
        #listen 443 ssl;
        #server_name other-site.com;
        #ssl_certificate /var/www/ssl/other-site.bundle.crt;
        #ssl_certificate_key /var/www/ssl/other-site.key;
        #add_header nginx_redirect apex_domain_ssl;
        #return 301 https://www.other-site.com$request_uri;
    #}
}
